openapi: 3.0.3
info:
  title: s15-28-m-node-react
  version: 1.0.0
  description: |-
    Guardianes del Tiempo Freelance es una plataforma innovadora diseñada para optimizar la gestión de proyectos y tareas de freelancers. Con Guardianes del Tiempo Freelance, los profesionales independientes pueden manejar eficientemente múltiples proyectos simultáneamente, lo que les permite maximizar su productividad y aumentar sus ingresos.

    Esta api realiza: 
    - Operaciones CRUD, para el manejo de los datos de los usuarios.
    - Operaciones de autenticación, para el acceso de usuarios y de la consulta.

    Algunos links de interés:
    - [![](https://img.shields.io/badge/Repositorio-76908e?logo=github)](https://github.com/No-Country/s15-28-m-node-react)
    - [![Deploy](https://vercel.com/button)]()

servers:
  - url: http://localhost:3000/api/v1
    description: Development server

tags:
  - name: Auth
    description: Operations about authentication
  - name: User
    description: Operations about user
  - name: Team
    description: Operations about team
  - name: Project
    description: Operations about project
  - name: Task
    description: Operations about task
  - name: Stopwatch
    description: Operations about stopwatch
  - name: Utils
    description: Operations about utils

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey

  schemas:
    User:
      type: object
      properties:
        uuid:
          type: string
          example: 12345678-1234-1234-1234-111111111111
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Smith
        email:
          type: string
          example: johndoe@example.com
        avatar:
          type: string
          example: https://example.com/avatar.jpg
        phone:
          type: string
          example: +1 123-456-7890
        birthdate:
          type: string
          example: 05/22/1999
        role_id:
          type: number
          example: 1
    UserInput:
      type: object
      properties:
        first_name:
          type: string
          description: User's first name
          example: John
        last_name:
          type: string
          description: User's last name
          example: Smith
        email:
          type: string
          description: User's email address
          example: user@example.com
        password:
          type: string
          description: User's password
          example: yourPassword123
        phone:
          type: string
          description: User's phone number
          example: +1 123-456-7890
        birthdate:
          type: string
          description: User's birthdate
          example: 05/22/1999
        role_id:
          type: number
          description: User's role ID (1 or 2) (1 = freelancer, 2 = client)
          example: 1
    Team:
      type: object
      properties:
        uuid:
          type: string
          example: 12345678-1234-1234-1234-111111111111
        name:
          type: string
          example: Team 1
        description:
          type: string
          example: Team 1 description
    Role:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: freelance
    Status:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: active
    Label:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: label 1
    Project:
      type: object
      properties:
        name:
          type: string
          example: Project 1
        description:
          type: string
          example: Project 1 description
        price_hour:
          type: number
          example: 10.00
        email_client:
          type: string
          example: johndoe@example.com
    Stopwatch:
      type: object
      properties:
        uuid:
          type: string
          example: 12345678-1234-1234-1234-111111111111
        time:
          type: string
          example: 00:10:00
        task_id:
          type: string
          example: 12345678-1234-1234-1234-111111111111
    Task:
      type: object
      properties:
        uuid:
          type: string
          example: 12345678-1234-1234-1234-111111111111
        init_date:
          type: string
          example: 01/01/2024
        end_date:
          type: string
          example: 05/01/2024
        name:
          type: string
          example: New Task
        is_completed:
          type: boolean
          example: true
        is_active:
          type: boolean
          example: true
        status_uuid:
          type: string
          format: uuid
          example: "456e7891-e12b-34d5-a678-526614174111"
        custom_label_id:
          type: integer
          example: 1
        label_id:
          type: string
          format: uuid
          example: "789e0123-e45b-67d8-a901-526614174222"
        project_uuid:
          type: string
          format: uuid
          example: "012e3456-e78b-90d1-a234-526614174333"
    Invoice:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        total_time:
          type: string
          format: time
          example: "12:00:00"
        price_hour:
          type: number
          format: decimal
          example: 50.00
        project_id:
          type: string
          format: uuid
          example: "789e0123-e45b-67d8-a901-526614174222"
        issue_date:
          type: string
          format: date-time
          example: "2023-06-01T00:00:00Z"

  parameters:
    UUID:
      name: id
      in: path
      required: true
      schema:
        type: string
        example: 12345678-1234-1234-1234-

    Search:
      name: name
      in: path
      required: true
      schema:
        type: string
        example: search string


  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Invalid request parameters
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized.
    404:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: dato no encontrado.
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Error interno del servidor.

security:
  - ApiKeyAuth: []

paths:
  /auth/login:
    post:
      summary: Login a user
      tags: [Auth]
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email address
                  example: user@example.com
                password:
                  type: string
                  description: User's password
                  example: yourPassword123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: El inicio de sesión ha sido exitoso.
                  token:
                    type: string
                    description: JWT token for authenticated requests
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        description: User registration data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully.
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  /user:
    get:
      summary: Get all users
      tags:
        - User
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Lista de usuarios realizada con éxito.
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '500':
          $ref: '#/components/responses/500'

  /user/{id}:
    get:
      summary: Get a user by ID
      tags:
        - User
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    put:
      summary: Update a user
      tags:
        - User
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      requestBody:
        description: User update data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated successfully.
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    delete:
      summary: Delete a user
      tags:
        - User
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: El usuario ha sido eliminado con éxito.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: El usuario ha sido eliminado con exito.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /team:
    get:
      summary: Get all teams
      tags:
        - Team
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Teams retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '500':
          $ref: '#/components/responses/500'

    post:
      summary: Create a new team
      tags:
        - Team
      security:
        - ApiKeyAuth: []
      requestBody:
        description: Team creation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '201':
          description: Team successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Team created successfully.

        '500':
          $ref: '#/components/responses/500'

  /team/{id}:
    get:
      summary: Get a team by ID
      tags:
        - Team
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Team retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    put:
      summary: Update a team
      tags:
        - Team
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      requestBody:
        description: Team update data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '200':
          description: Team successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: team not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Team not found
        '500':
          $ref: '#/components/responses/500'

    delete:
      summary: Delete a team
      tags:
        - Team
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Team deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Team deleted successfully
          '404':
            description: team not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Team not found
          '500':
            $ref: '#/components/responses/500'

  /roles:
    get:
      summary: Get all roles
      tags:
        - Utils
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '500':
          $ref: '#/components/responses/500'
  /status:
    get:
      summary: Get all status
      tags:
        - Utils
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          $ref: '#/components/responses/500'
  /labels:
    get:
      summary: Get all labels
      tags:
        - Utils
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Labels retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '500':
          $ref: '#/components/responses/500'
  /project:
    get:
      summary: Get all projects
      tags:
        - Project
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Create a new project
      tags:
        - Project
      security:
        - ApiKeyAuth: []
      requestBody:
        description: Project creation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Project successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '500':
          $ref: '#/components/responses/500'

  /project/{id}:
    get:
      summary: Get a project by ID
      tags:
        - Project
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update a project
      tags:
        - Project
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      requestBody:
        description: Project update data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    delete:
      summary: Delete a project
      tags:
        - Project
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Project deleted successfully
          '500':
            $ref: '#/components/responses/500'

  /stopwatch/{uuid}:
    get:
      summary: Get a stopwatch
      tags:
        - Stopwatch
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Stopwatch retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stopwatch'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    put:
      summary: Update a stopwatch
      tags:
        - Stopwatch
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      requestBody:
        description: Stopwatch update data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stopwatch'
      responses:
        '200':
          description: Stopwatch successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stopwatch'
        '400':
          $ref: '#/components/responses/400'

    delete:
      summary: Delete a stopwatch
      tags:
        - Stopwatch
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Stopwatch deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Stopwatch deleted successfully
        '500':
          $ref: '#/components/responses/500'
  /stopwatch:
    post:
      summary: Create a new stopwatch
      tags:
        - Stopwatch
      security:
        - ApiKeyAuth: []
      requestBody:
        description: Stopwatch creation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stopwatch'
      responses:
        '201':
          description: Stopwatch successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stopwatch'
        '500':
          $ref: '#/components/responses/500'

  /task:
    get:
      summary: Get all tasks
      tags:
        - Task
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '500':
          $ref: '#/components/responses/500'

    post:
      summary: Create a new task
      tags:
        - Task
      security:
        - ApiKeyAuth: []
      requestBody:
        description: Task creation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '500':
          $ref: '#/components/responses/500'
  /task/search:
    get:
      summary: Search tasks
      tags:
        - Task
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '500':
          $ref: '#/components/responses/500'

  /task/{id}:
    get:
      summary: Get a task by ID
      tags:
        - Task
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Update a task
      tags:
        - Task
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      requestBody:
        description: Task update data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    delete:
      summary: Delete a task
      tags:
        - Task
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task deleted successfully
        '500':
          $ref: '#/components/responses/500'
  /task/disable/{id}:
    patch:
      summary: Disable a task
      tags:
        - Task
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      requestBody:
        description: Disable Task
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/'

  /invoice:
    get:
      summary: Get all invoices
      tags:
        - Invoice
      responses:
        '200':
          description: Invoices retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invoice'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Create a new invoice
      tags:
        - Invoice
      security:
        - ApiKeyAuth: []
      requestBody:
        description: Invoice creation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
              example:
                uuid: "123e4567-e89b-12d3-a456-426614174000"
                total_time: "12:00:00"
                price_hour: 50.00
                project_id: "789e0123-e45b-67d8-a901-526614174222"
                issue_date: "2023-06-01T00:00:00Z"
      responses:
        '201':
          description: Invoice successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Update an invoice
      tags:
        - Invoice
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      requestBody:
        description: Invoice update data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
              example:
                total_time: "10:00:00"
                price_hour: 60.00
      responses:
        '200':
          description: Invoice successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete an invoice
      tags:
        - Invoice
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Invoice deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invoice deleted successfully
        '500':
          $ref: '#/components/responses/500'
  /invoice/{id}:
    get:
      summary: Get an invoice by ID
      tags:
        - Invoice
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Invoice retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
              example:
                uuid: "123e4567-e89b-12d3-a456-426614174000"
                total_time: "12:00:00"
                price_hour: 50.00
                project_id: "789e0123-e45b-67d8-a901-526614174222"
                issue_date: "2023-06-01T00:00:00Z"
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Update an invoice
      tags:
        - Invoice
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      requestBody:
        description: Invoice update data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
              example:
                total_time: "10:00:00"
                price_hour: 60.00
      responses:
        '200':
          description: Invoice successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete an invoice
      tags:
        - Invoice
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/UUID'
      responses:
        '200':
          description: Invoice deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invoice deleted successfully
        '500':
          $ref: '#/components/responses/500'
